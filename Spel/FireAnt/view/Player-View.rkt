(define (new-player-view owner canvas)
  (let* ((layer (canvas 'make-layer))
         (bitmap (string-append bitmap-dir "ant.png"))
         (mask (string-append mask-dir "ant.png"))
         (tile (make-tile TILE-SIZE TILE-SIZE bitmap mask))
         (moving #f))

    (define (init)
      ((layer 'add-drawable) tile)
      (let ((x (* ((owner 'get-position) 'get-x)
                  TILE-SIZE))
            (y (* ((owner 'get-position) 'get-y)
                  TILE-SIZE)))
        ((tile 'set-x!) x)
        ((tile 'set-y!) y)))

    (define (get-owner)
      owner)

    (define (draw ms)
      (let ((step (* ms TRANSITION-SPEED))
            (old-x (tile 'get-x))
            (old-y (tile 'get-y))
            (x (* ((owner 'get-position) 'get-x)
                  TILE-SIZE))
            (y (* ((owner 'get-position) 'get-y)
                  TILE-SIZE)))
        (set! moving (or (transition (tile 'set-x!) old-x x step)
                         (transition (tile 'set-y!) old-y y step)))))

    (define (transition setter old new step)
      (if (< (abs (- new old)) step)
          (begin (setter new)
                 #f)
          (begin (if (< new old)
                   (setter (- old step))
                   (setter (+ old step)))
                 #t)))

    (define (is-moving?)
      moving)
    (define (dispatch cmd . args)
      (cond ((eq? cmd 'draw) (apply draw args))
            ((eq? cmd 'get-owner) (apply get-owner args))
            ((eq? cmd 'is-moving?) (apply is-moving? args))
            (else (error "Unknown command" cmd))))

    (init)
    dispatch))
